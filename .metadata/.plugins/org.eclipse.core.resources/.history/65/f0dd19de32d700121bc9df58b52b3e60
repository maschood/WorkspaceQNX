/**
 * @file HAL.h
 * @author Erik Matthiessen
 *         Denis Rycka
 *         Nilüfer Güngör
 *         Maschhood Ahmad
 * 
 */

#ifndef HAL_A_H_
#define HAL_A_H_

#include <stdint.h>
#include <iostream>
#include <unistd.h>

#include "Addresses.h"
#include "HWaccess.h"
#include "Mutex.h"

class HAL_A {
private:
	/**
	 * Instance for using the hal (Singleton)
	 */
	static HAL_A* instance;

	/**
	 * Mutex for securing access to hal instance
	 */
	static Mutex* halInstanceMutex;

	/**
	 * Mutex for threadsafe hal usage
	 */
	static Mutex* halMutex;

	/**
	 * Bool to control that no other puck can start convayor if not allowd
	 */
	bool fullStop;

	/**
	 * Private standard constructor for the singleton pattern
	 */
	HAL_A();
public:
	/**
	 * Standard destructor, deletes used mutexes and the HAL-instance
	 */
	~HAL_A();

	/**
	 * Function returns an instance of the Hal-class. Class is
	 * using singleton pattern, so only one instance for access to
	 * the HW exists.
	 * @return instance of the hal
	 */
	static HAL_A* getInstance();

	// Port A

	void engineRight(bool isSlow);

	void revokeEngineRight();

	void revokeEngineLeft();

	void engineLeft(bool isSlow);

	void engineStop();

	void engineUnstop();

	void engineFullStop();

	void engineFullUnstop();

	bool isEngineStopped();

	void gate(bool isOpen);

	void lamp_red(bool isOn);

	void lamp_yellow(bool isOn);

	void lightGreen(bool isOn);

	void lightsOff();

	// Port C

	/**
	 * Switches led of the start-button on or off
	 * @param isOn [true for on, false for off]
	 */
	void ledStart(bool isOn);

	/**
	 * Switches led of the reset-button on or off
	 * @param isOn [true for on, false for off]
	 */
	void ledReset(bool isOn);
};

#endif /* HAL_A_H_ */
