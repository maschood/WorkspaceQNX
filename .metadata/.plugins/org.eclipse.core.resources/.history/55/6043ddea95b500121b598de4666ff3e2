/*
 * HAL_ISR.cpp
 *
 *  Created on: 30.04.2013
 *      Author: maschood
 */

#include "HAL_ISR.h"

static int coid;

const struct sigevent * intHandler(void *arg, int id) {
	int iir;
	uint8_t val;
	struct sigevent *event = (struct sigevent *) arg;
	/*
	 * determine the source of the interrupt
	 * by reading the Interrupt Identification Register
	 */
	iir = in8(DIO_BASE + OFFS_INT_STATUS) & (BIT_1 | BIT_3);
	out8(DIO_BASE + OFFS_INT_STATUS, 0);

	switch (iir) {
	case (BIT_1 | BIT_3):
		val = (in8(DIO_BASE + DIO_OFFS_B) << 8) | (in8(DIO_BASE + DIO_OFFS_C));
		SIGEV_PULSE_INIT(event, coid, SIGEV_PULSE_PRIO_INHERIT,
				PB_STATUS | PC_STATUS, val);
		break;
	case BIT_1:
		val = in8(DIO_BASE + DIO_OFFS_B);
		SIGEV_PULSE_INIT(event, coid, SIGEV_PULSE_PRIO_INHERIT,
				PB_STATUS, val);
		break;
	case BIT_3:
		val = in8(DIO_BASE + DIO_OFFS_C);
		SIGEV_PULSE_INIT(event, coid, SIGEV_PULSE_PRIO_INHERIT,
				PC_STATUS, val);
		break;
	default:
		break;
		event = NULL;
	}
	return event;
}

HAL_ISR* HAL_ISR::instance= NULL;

HAL_ISR::HAL_ISR() {
	HAL_ISR::getInstance();
	initInterrupt();
}

HAL_ISR::~HAL_ISR() {
	// TODO Auto-generated destructor stub
}

HAL_ISR* HAL_ISR::getInstance() {
    if (instance == NULL) {
        instance = new HAL_ISR();
    }
    return instance;
}

void HAL_ISR::shutdown(){
}

void HAL_ISR::initInterrupt(){
		// create channel to receive pulse messages from the ISR
	    chid = ChannelCreate(0);
	    if (chid == -1) {
	        perror("SensorikIntro: ChannelCreate isrChid failed");
	        exit(EXIT_FAILURE);
	    }

	    //Connect to Channel
	    coid = ConnectAttach(0, 0, chid, _NTO_SIDE_CHANNEL, 0);
	    if (coid == -1) {
	        perror("SensorikIntro: ConnectAttach isr_coid failed");
	        exit(EXIT_FAILURE);
	    }

	    //Iinit Sigevent for Pulse
	    SIGEV_PULSE_INIT(&event, coid, SIGEV_PULSE_PRIO_INHERIT, 0, 0);

	    //ISR register
	  	interruptId = InterruptAttach(HW_SERIAL_IRQ, intHandler, &event, sizeof(event), 0);
	  	if(interruptId == -1){
	  	    	perror( "Fehler beim InterruptAttach");
	  	    	exit(EXIT_FAILURE);
	  	}
		//Reset IRQs status Register
		out8(DIO_BASE + OFFS_INT_STATUS, 0);

	    // disable interrupts for all ports (Bit 0-5)
	    uint8_t int_ctrl = in8(DIO_BASE + OFFS_INT_CTRL);
	    out8(DIO_BASE + OFFS_INT_CTRL, int_ctrl | 0b00111111);

	    // enable interrupt for portB und portC (Bit 1 und 2) (S. 18)
	    int_ctrl = in8(DIO_BASE + OFFS_INT_CTRL);
	    out8(DIO_BASE + OFFS_INT_CTRL, int_ctrl & ~(PB_CTRL | PC_CTRL));


	    // read out port B and C valies
	        portBstatus = in8(DIO_BASE + DIO_OFFS_B);
	        portCstatus = in8(DIO_BASE + DIO_OFFS_B);

	    }

void HAL_ISR::stop(){
	  HAWThread::stop(); // super.stop();

	    if (-1 == ConnectDetach(coid)) {
	        perror("SensorCtrl: ConnectDetach coid failed");
	    }
	    if (-1 == ChannelDestroy(chid)) {
	        perror("SensorCtrl: ChannelDestroy chid failed");
	    }
}

void HAL_ISR::execute(void* arg){
	cout << "| code  |  " << "value |" << endl;
	    cout << "|----------------|" << endl;

	    struct _pulse pulse;
	    while (!isStopped()) {
	        if( -1 == MsgReceivePulse(isrChid, &pulse, sizeof(pulse), NULL) ){
	            if (isStopped()) {
	                break; // channel destroyed, Thread ending
	            }
	            perror("SensorCtrl: MsgReceivePulse");
	            exit(EXIT_FAILURE);
	        }

	        printf("|   %X   |   %2X   |", pulse.code, pulse.value.sival_int);
	        cout << endl;
	    }
}
}
